
CANreader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000dd4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010a  0080010a  00000e72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016b1  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000573  00000000  00000000  0000264b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073d  00000000  00000000  00002bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000039c  00000000  00000000  000032fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  00003698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d3c  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000057a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	e6 01       	movw	r28, r12
  6a:	b2 01       	movw	r22, r4
  6c:	bb 01       	movw	r22, r22
  6e:	c5 01       	movw	r24, r10
  70:	cf 01       	movw	r24, r30
  72:	d8 01       	movw	r26, r16
  74:	dd 01       	movw	r26, r26

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e4 ed       	ldi	r30, 0xD4	; 212
  8a:	fd e0       	ldi	r31, 0x0D	; 13
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	aa 30       	cpi	r26, 0x0A	; 10
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	aa e0       	ldi	r26, 0x0A	; 10
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 31       	cpi	r26, 0x17	; 23
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 c4 02 	call	0x588	; 0x588 <main>
  ac:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <SPIputc>:
	SPIputc(0);
	SPIputc(0);
	
	SPIputc(length);
	
	for (idx = 0; idx < length; idx++) {
  b4:	8e bd       	out	0x2e, r24	; 46
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <SPIputc+0x2>
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	08 95       	ret

000000c0 <mcpReadRegister>:
  c0:	cf 93       	push	r28
		SPIputc(packet.data[idx]);
  c2:	c8 2f       	mov	r28, r24
  c4:	2a 98       	cbi	0x05, 2	; 5
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	SPIputc(0);
	SPIputc(0);
	
	SPIputc(length);
	
	for (idx = 0; idx < length; idx++) {
  cc:	8c 2f       	mov	r24, r28
  ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
		SPIputc(packet.data[idx]);
	}
	
	PORTB |= (1<<MCPSS);
  d2:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
  d8:	2a 9a       	sbi	0x05, 2	; 5
  da:	cf 91       	pop	r28
	_delay_us(5);
	
	PORTB &= ~(1<<MCPSS);
  dc:	08 95       	ret

000000de <mcpWriteRegister>:
	addr = (addr == 0) ? 1 : addr;
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	d8 2f       	mov	r29, r24
  e4:	c6 2f       	mov	r28, r22
	SPIputc(SPI_RTS | addr);
  e6:	28 98       	cbi	0x05, 0	; 5
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	PORTB |= (1<<MCPSS);
  ee:	8d 2f       	mov	r24, r29
	
	return addr;
  f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	else if (bit_is_clear(status, 4))	//TXB1
		addr = 0x02;
	else if (bit_is_clear(status, 6))	//TXB2
		addr = 0x04;
	else
		return 0;						//buffers full
  f4:	8c 2f       	mov	r24, r28
	addr = (addr == 0) ? 1 : addr;
	SPIputc(SPI_RTS | addr);
	PORTB |= (1<<MCPSS);
	
	return addr;
}
  f6:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
  fa:	2a 9a       	sbi	0x05, 2	; 5
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <canInit>:
 102:	cf 92       	push	r12
 104:	df 92       	push	r13
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	6b 01       	movw	r12, r22
 10c:	7c 01       	movw	r14, r24
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	8c 62       	ori	r24, 0x2C	; 44
}


uint8_t canInit(uint32_t speed) {
	// Uno SPI pins setup
	DDRB |= (1<<MCPSCK) | (1<<MCPMOSI) | (1<<MCPSS);
 112:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MCPMISO);
 114:	24 98       	cbi	0x04, 4	; 4
	PORTB &= ~((1<<MCPSCK) | (1<< MCPMOSI) | (1<<MCPMISO));
 116:	85 b1       	in	r24, 0x05	; 5
 118:	87 7c       	andi	r24, 0xC7	; 199
 11a:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<MCPSS);
 11c:	2a 9a       	sbi	0x05, 2	; 5
	
	// Uno SPI config
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 11e:	81 e5       	ldi	r24, 0x51	; 81
 120:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
 122:	1d bc       	out	0x2d, r1	; 45
	
	// Soft Reset MCP2515 chip
	PORTB &= ~(1<<MCPSS);
 124:	2a 98       	cbi	0x05, 2	; 5
	SPIputc(SPI_RESET);
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	PORTB |= (1<<MCPSS);
 12c:	2a 9a       	sbi	0x05, 2	; 5
 12e:	87 ec       	ldi	r24, 0xC7	; 199
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <canInit+0x30>
 136:	00 c0       	rjmp	.+0      	; 0x138 <canInit+0x36>
 138:	00 00       	nop
	_delay_us(50);
	
	// MCP2515 config
	PORTB &= ~(1<<MCPSS);
 13a:	2a 98       	cbi	0x05, 2	; 5
	SPIputc(SPI_WRITE);
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	SPIputc(CNF3);
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	SPIputc(1<<PHSEG21);
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	SPIputc((1<<BTLMODE) | (1<<PHSEG11));
 14e:	80 e9       	ldi	r24, 0x90	; 144
 150:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	SPIputc(speed);
 154:	8c 2d       	mov	r24, r12
 156:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	SPIputc((1<<RX1IE) | (1<<RX0IE));
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIputc>
	PORTB |= (1<<MCPSS);
 160:	2a 9a       	sbi	0x05, 2	; 5
	
	if (mcpReadRegister(CNF1) != speed) {
 162:	8a e2       	ldi	r24, 0x2A	; 42
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <mcpReadRegister>
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a0 e0       	ldi	r26, 0x00	; 0
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	8c 15       	cp	r24, r12
 170:	9d 05       	cpc	r25, r13
 172:	ae 05       	cpc	r26, r14
 174:	bf 05       	cpc	r27, r15
 176:	b1 f4       	brne	.+44     	; 0x1a4 <canInit+0xa2>
		return 0; //exit, retry
	}
	
	// Buffer High-Z
	mcpWriteRegister(BFPCTRL, 0);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	0e 94 6f 00 	call	0xde	; 0xde <mcpWriteRegister>
	// Transmit start
	mcpWriteRegister(TXRTSCTRL, 0);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	8d e0       	ldi	r24, 0x0D	; 13
 184:	0e 94 6f 00 	call	0xde	; 0xde <mcpWriteRegister>
	// Filters
	mcpWriteRegister(RXB0CTRL, (1<<RXM1) | (1<<RXM0));
 188:	60 e6       	ldi	r22, 0x60	; 96
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	0e 94 6f 00 	call	0xde	; 0xde <mcpWriteRegister>
	mcpWriteRegister(RXB1CTRL, (1<<RXM1) | (1<<RXM0));
 190:	60 e6       	ldi	r22, 0x60	; 96
 192:	80 e7       	ldi	r24, 0x70	; 112
 194:	0e 94 6f 00 	call	0xde	; 0xde <mcpWriteRegister>
	// Exit Config mode
	mcpWriteRegister(CANCTRL, 0);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	0e 94 6f 00 	call	0xde	; 0xde <mcpWriteRegister>
	
	return 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <canInit+0xa4>
	SPIputc(speed);
	SPIputc((1<<RX1IE) | (1<<RX0IE));
	PORTB |= (1<<MCPSS);
	
	if (mcpReadRegister(CNF1) != speed) {
		return 0; //exit, retry
 1a4:	80 e0       	ldi	r24, 0x00	; 0
	mcpWriteRegister(RXB1CTRL, (1<<RXM1) | (1<<RXM0));
	// Exit Config mode
	mcpWriteRegister(CANCTRL, 0);
	
	return 1;
}
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret

000001b0 <ledInit>:
	return 0;
}


void ledInit() {
	NS_Rainbow_init(LED_COUNT, LED_DATA_PIN); //change value in #defines
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	68 e2       	ldi	r22, 0x28	; 40
 1b4:	80 e4       	ldi	r24, 0x40	; 64
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <NS_Rainbow_init>
	setBrightness(LED_BRIGHTNESS);
 1bc:	85 e0       	ldi	r24, 0x05	; 5
 1be:	0e 94 69 04 	call	0x8d2	; 0x8d2 <setBrightness>
 1c2:	08 95       	ret

000001c4 <drawBar>:
}


int drawBar(uint8_t loc, uint16_t metric, uint16_t type) {
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	c8 2f       	mov	r28, r24
	uint8_t idx, height;
	uint8_t led = 56 + (loc*5);
	uint32_t color = 0xFFFFFF;
	
	
	switch (type) {
 1da:	4c 30       	cpi	r20, 0x0C	; 12
 1dc:	51 05       	cpc	r21, r1
 1de:	29 f0       	breq	.+10     	; 0x1ea <drawBar+0x26>
 1e0:	4d 30       	cpi	r20, 0x0D	; 13
 1e2:	51 05       	cpc	r21, r1
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <drawBar+0x24>
 1e6:	9d c0       	rjmp	.+314    	; 0x322 <drawBar+0x15e>
 1e8:	c2 c1       	rjmp	.+900    	; 0x56e <drawBar+0x3aa>
		case ENGINE_RPM: //RPM
		// filter out invalid values
		metric = metric < 0 ? 0 : metric;
		metric = metric > 8000 ? 8000 : metric;
 1ea:	26 2f       	mov	r18, r22
 1ec:	37 2f       	mov	r19, r23
 1ee:	21 34       	cpi	r18, 0x41	; 65
 1f0:	8f e1       	ldi	r24, 0x1F	; 31
 1f2:	38 07       	cpc	r19, r24
 1f4:	10 f0       	brcs	.+4      	; 0x1fa <drawBar+0x36>
 1f6:	20 e4       	ldi	r18, 0x40	; 64
 1f8:	3f e1       	ldi	r19, 0x1F	; 31
		
		if (metric < 1400) {
 1fa:	28 37       	cpi	r18, 0x78	; 120
 1fc:	95 e0       	ldi	r25, 0x05	; 5
 1fe:	39 07       	cpc	r19, r25
 200:	a0 f4       	brcc	.+40     	; 0x22a <drawBar+0x66>
			color = BLUE;
			height = metric/56;
 202:	36 95       	lsr	r19
 204:	27 95       	ror	r18
 206:	36 95       	lsr	r19
 208:	27 95       	ror	r18
 20a:	36 95       	lsr	r19
 20c:	27 95       	ror	r18
 20e:	a3 e9       	ldi	r26, 0x93	; 147
 210:	b4 e2       	ldi	r27, 0x24	; 36
 212:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 216:	b8 2e       	mov	r11, r24
		// filter out invalid values
		metric = metric < 0 ? 0 : metric;
		metric = metric > 8000 ? 8000 : metric;
		
		if (metric < 1400) {
			color = BLUE;
 218:	0f 2e       	mov	r0, r31
 21a:	fd ed       	ldi	r31, 0xDD	; 221
 21c:	cf 2e       	mov	r12, r31
 21e:	f4 e4       	ldi	r31, 0x44	; 68
 220:	df 2e       	mov	r13, r31
 222:	ed 2c       	mov	r14, r13
 224:	f1 2c       	mov	r15, r1
 226:	f0 2d       	mov	r31, r0
 228:	ef c0       	rjmp	.+478    	; 0x408 <drawBar+0x244>
			height = metric/56;
		}
		else if (metric < 2800) {
 22a:	20 3f       	cpi	r18, 0xF0	; 240
 22c:	ea e0       	ldi	r30, 0x0A	; 10
 22e:	3e 07       	cpc	r19, r30
 230:	b0 f4       	brcc	.+44     	; 0x25e <drawBar+0x9a>
			color = TURQ;
			height = (metric-1400)/56;
 232:	28 57       	subi	r18, 0x78	; 120
 234:	35 40       	sbci	r19, 0x05	; 5
 236:	36 95       	lsr	r19
 238:	27 95       	ror	r18
 23a:	36 95       	lsr	r19
 23c:	27 95       	ror	r18
 23e:	36 95       	lsr	r19
 240:	27 95       	ror	r18
 242:	a3 e9       	ldi	r26, 0x93	; 147
 244:	b4 e2       	ldi	r27, 0x24	; 36
 246:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 24a:	b8 2e       	mov	r11, r24
		if (metric < 1400) {
			color = BLUE;
			height = metric/56;
		}
		else if (metric < 2800) {
			color = TURQ;
 24c:	0f 2e       	mov	r0, r31
 24e:	cc 24       	eor	r12, r12
 250:	ca 94       	dec	r12
 252:	fe ee       	ldi	r31, 0xEE	; 238
 254:	df 2e       	mov	r13, r31
 256:	e1 2c       	mov	r14, r1
 258:	f1 2c       	mov	r15, r1
 25a:	f0 2d       	mov	r31, r0
 25c:	d5 c0       	rjmp	.+426    	; 0x408 <drawBar+0x244>
			height = (metric-1400)/56;
		}
		else if (metric < 4200) {
 25e:	28 36       	cpi	r18, 0x68	; 104
 260:	f0 e1       	ldi	r31, 0x10	; 16
 262:	3f 07       	cpc	r19, r31
 264:	b8 f4       	brcc	.+46     	; 0x294 <drawBar+0xd0>
			color = GREEN;
			height = (metric-2800)/56;
 266:	20 5f       	subi	r18, 0xF0	; 240
 268:	3a 40       	sbci	r19, 0x0A	; 10
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
 26e:	36 95       	lsr	r19
 270:	27 95       	ror	r18
 272:	36 95       	lsr	r19
 274:	27 95       	ror	r18
 276:	a3 e9       	ldi	r26, 0x93	; 147
 278:	b4 e2       	ldi	r27, 0x24	; 36
 27a:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 27e:	b8 2e       	mov	r11, r24
		else if (metric < 2800) {
			color = TURQ;
			height = (metric-1400)/56;
		}
		else if (metric < 4200) {
			color = GREEN;
 280:	0f 2e       	mov	r0, r31
 282:	f5 e2       	ldi	r31, 0x25	; 37
 284:	cf 2e       	mov	r12, r31
 286:	f0 ed       	ldi	r31, 0xD0	; 208
 288:	df 2e       	mov	r13, r31
 28a:	f9 e6       	ldi	r31, 0x69	; 105
 28c:	ef 2e       	mov	r14, r31
 28e:	f1 2c       	mov	r15, r1
 290:	f0 2d       	mov	r31, r0
 292:	ba c0       	rjmp	.+372    	; 0x408 <drawBar+0x244>
			height = (metric-2800)/56;
		}
		else if (metric < 5600) {
 294:	20 3e       	cpi	r18, 0xE0	; 224
 296:	85 e1       	ldi	r24, 0x15	; 21
 298:	38 07       	cpc	r19, r24
 29a:	b8 f4       	brcc	.+46     	; 0x2ca <drawBar+0x106>
			color = AMBER;
			height = (metric-4200)/56;
 29c:	28 56       	subi	r18, 0x68	; 104
 29e:	30 41       	sbci	r19, 0x10	; 16
 2a0:	36 95       	lsr	r19
 2a2:	27 95       	ror	r18
 2a4:	36 95       	lsr	r19
 2a6:	27 95       	ror	r18
 2a8:	36 95       	lsr	r19
 2aa:	27 95       	ror	r18
 2ac:	a3 e9       	ldi	r26, 0x93	; 147
 2ae:	b4 e2       	ldi	r27, 0x24	; 36
 2b0:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 2b4:	b8 2e       	mov	r11, r24
		else if (metric < 4200) {
			color = GREEN;
			height = (metric-2800)/56;
		}
		else if (metric < 5600) {
			color = AMBER;
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f3 e3       	ldi	r31, 0x33	; 51
 2ba:	cf 2e       	mov	r12, r31
 2bc:	fb eb       	ldi	r31, 0xBB	; 187
 2be:	df 2e       	mov	r13, r31
 2c0:	fc ec       	ldi	r31, 0xCC	; 204
 2c2:	ef 2e       	mov	r14, r31
 2c4:	f1 2c       	mov	r15, r1
 2c6:	f0 2d       	mov	r31, r0
 2c8:	9f c0       	rjmp	.+318    	; 0x408 <drawBar+0x244>
			height = (metric-4200)/56;
		}
		else if (metric < 7000) {
 2ca:	28 35       	cpi	r18, 0x58	; 88
 2cc:	9b e1       	ldi	r25, 0x1B	; 27
 2ce:	39 07       	cpc	r19, r25
 2d0:	b0 f4       	brcc	.+44     	; 0x2fe <drawBar+0x13a>
			color = ORANGE;
			height = (metric-5600)/56;
 2d2:	20 5e       	subi	r18, 0xE0	; 224
 2d4:	35 41       	sbci	r19, 0x15	; 21
 2d6:	36 95       	lsr	r19
 2d8:	27 95       	ror	r18
 2da:	36 95       	lsr	r19
 2dc:	27 95       	ror	r18
 2de:	36 95       	lsr	r19
 2e0:	27 95       	ror	r18
 2e2:	a3 e9       	ldi	r26, 0x93	; 147
 2e4:	b4 e2       	ldi	r27, 0x24	; 36
 2e6:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 2ea:	b8 2e       	mov	r11, r24
		else if (metric < 5600) {
			color = AMBER;
			height = (metric-4200)/56;
		}
		else if (metric < 7000) {
			color = ORANGE;
 2ec:	0f 2e       	mov	r0, r31
 2ee:	c1 2c       	mov	r12, r1
 2f0:	f9 e9       	ldi	r31, 0x99	; 153
 2f2:	df 2e       	mov	r13, r31
 2f4:	ee 24       	eor	r14, r14
 2f6:	ea 94       	dec	r14
 2f8:	f1 2c       	mov	r15, r1
 2fa:	f0 2d       	mov	r31, r0
 2fc:	85 c0       	rjmp	.+266    	; 0x408 <drawBar+0x244>
			height = (metric-5600)/56;
		}
		else { // more than 7000
			color = RED;
			height = (metric-7000)/56;
 2fe:	28 55       	subi	r18, 0x58	; 88
 300:	3b 41       	sbci	r19, 0x1B	; 27
 302:	36 95       	lsr	r19
 304:	27 95       	ror	r18
 306:	36 95       	lsr	r19
 308:	27 95       	ror	r18
 30a:	36 95       	lsr	r19
 30c:	27 95       	ror	r18
 30e:	a3 e9       	ldi	r26, 0x93	; 147
 310:	b4 e2       	ldi	r27, 0x24	; 36
 312:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 316:	b8 2e       	mov	r11, r24
		else if (metric < 7000) {
			color = ORANGE;
			height = (metric-5600)/56;
		}
		else { // more than 7000
			color = RED;
 318:	c1 2c       	mov	r12, r1
 31a:	d1 2c       	mov	r13, r1
 31c:	76 01       	movw	r14, r12
 31e:	ea 94       	dec	r14
 320:	73 c0       	rjmp	.+230    	; 0x408 <drawBar+0x244>
		break;
		
		
		case VEHICLE_SPEED: //Speed (km/h) (16km = 10mi)
		metric = metric < 0 ? 0 : metric;
		metric = metric > 167 ? 167 : metric;
 322:	46 2f       	mov	r20, r22
 324:	57 2f       	mov	r21, r23
 326:	48 3a       	cpi	r20, 0xA8	; 168
 328:	51 05       	cpc	r21, r1
 32a:	10 f0       	brcs	.+4      	; 0x330 <drawBar+0x16c>
 32c:	47 ea       	ldi	r20, 0xA7	; 167
 32e:	50 e0       	ldi	r21, 0x00	; 0
				
		switch(metric / 24) {
 330:	9a 01       	movw	r18, r20
 332:	ab ea       	ldi	r26, 0xAB	; 171
 334:	ba ea       	ldi	r27, 0xAA	; 170
 336:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 33a:	92 95       	swap	r25
 33c:	82 95       	swap	r24
 33e:	8f 70       	andi	r24, 0x0F	; 15
 340:	89 27       	eor	r24, r25
 342:	9f 70       	andi	r25, 0x0F	; 15
 344:	89 27       	eor	r24, r25
 346:	87 30       	cpi	r24, 0x07	; 7
 348:	91 05       	cpc	r25, r1
 34a:	30 f4       	brcc	.+12     	; 0x358 <drawBar+0x194>
 34c:	9c 01       	movw	r18, r24
 34e:	2c 5c       	subi	r18, 0xCC	; 204
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	f9 01       	movw	r30, r18
 354:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__tablejump2__>

	//setColor_RGB(LED, RRGGBB);

	uint8_t idx, height;
	uint8_t led = 56 + (loc*5);
	uint32_t color = 0xFFFFFF;
 358:	cc 24       	eor	r12, r12
 35a:	ca 94       	dec	r12
 35c:	dc 2c       	mov	r13, r12
 35e:	ec 2c       	mov	r14, r12
 360:	f1 2c       	mov	r15, r1
 362:	3c c0       	rjmp	.+120    	; 0x3dc <drawBar+0x218>
		switch(metric / 24) {
			case 0:
				color = BLUE;
				break;
			case 1:
				color = TURQ;
 364:	0f 2e       	mov	r0, r31
 366:	cc 24       	eor	r12, r12
 368:	ca 94       	dec	r12
 36a:	fe ee       	ldi	r31, 0xEE	; 238
 36c:	df 2e       	mov	r13, r31
 36e:	e1 2c       	mov	r14, r1
 370:	f1 2c       	mov	r15, r1
 372:	f0 2d       	mov	r31, r0
				break;
 374:	33 c0       	rjmp	.+102    	; 0x3dc <drawBar+0x218>
			case 2:
				color = GREEN;
 376:	0f 2e       	mov	r0, r31
 378:	f5 e2       	ldi	r31, 0x25	; 37
 37a:	cf 2e       	mov	r12, r31
 37c:	f0 ed       	ldi	r31, 0xD0	; 208
 37e:	df 2e       	mov	r13, r31
 380:	f9 e6       	ldi	r31, 0x69	; 105
 382:	ef 2e       	mov	r14, r31
 384:	f1 2c       	mov	r15, r1
 386:	f0 2d       	mov	r31, r0
				break;
 388:	29 c0       	rjmp	.+82     	; 0x3dc <drawBar+0x218>
			case 3:
				color = AMBER;
 38a:	0f 2e       	mov	r0, r31
 38c:	f3 e3       	ldi	r31, 0x33	; 51
 38e:	cf 2e       	mov	r12, r31
 390:	fb eb       	ldi	r31, 0xBB	; 187
 392:	df 2e       	mov	r13, r31
 394:	fc ec       	ldi	r31, 0xCC	; 204
 396:	ef 2e       	mov	r14, r31
 398:	f1 2c       	mov	r15, r1
 39a:	f0 2d       	mov	r31, r0
				break;
 39c:	1f c0       	rjmp	.+62     	; 0x3dc <drawBar+0x218>
			case 4:
				color = ORANGE;
 39e:	0f 2e       	mov	r0, r31
 3a0:	c1 2c       	mov	r12, r1
 3a2:	f9 e9       	ldi	r31, 0x99	; 153
 3a4:	df 2e       	mov	r13, r31
 3a6:	ee 24       	eor	r14, r14
 3a8:	ea 94       	dec	r14
 3aa:	f1 2c       	mov	r15, r1
 3ac:	f0 2d       	mov	r31, r0
				break;
 3ae:	16 c0       	rjmp	.+44     	; 0x3dc <drawBar+0x218>
			case 5:
				color = RED;
 3b0:	c1 2c       	mov	r12, r1
 3b2:	d1 2c       	mov	r13, r1
 3b4:	76 01       	movw	r14, r12
 3b6:	ea 94       	dec	r14
				break;
 3b8:	11 c0       	rjmp	.+34     	; 0x3dc <drawBar+0x218>
			case 6:
				color = PINK;
 3ba:	0f 2e       	mov	r0, r31
 3bc:	f9 e9       	ldi	r31, 0x99	; 153
 3be:	cf 2e       	mov	r12, r31
 3c0:	dc 2c       	mov	r13, r12
 3c2:	ee 24       	eor	r14, r14
 3c4:	ea 94       	dec	r14
 3c6:	f1 2c       	mov	r15, r1
 3c8:	f0 2d       	mov	r31, r0
				break;
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <drawBar+0x218>
		metric = metric < 0 ? 0 : metric;
		metric = metric > 167 ? 167 : metric;
				
		switch(metric / 24) {
			case 0:
				color = BLUE;
 3cc:	0f 2e       	mov	r0, r31
 3ce:	fd ed       	ldi	r31, 0xDD	; 221
 3d0:	cf 2e       	mov	r12, r31
 3d2:	f4 e4       	ldi	r31, 0x44	; 68
 3d4:	df 2e       	mov	r13, r31
 3d6:	ed 2c       	mov	r14, r13
 3d8:	f1 2c       	mov	r15, r1
 3da:	f0 2d       	mov	r31, r0
			case 6:
				color = PINK;
				break;
		}
		
		height = metric % 24;
 3dc:	9a 01       	movw	r18, r20
 3de:	ab ea       	ldi	r26, 0xAB	; 171
 3e0:	ba ea       	ldi	r27, 0xAA	; 170
 3e2:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 3e6:	92 95       	swap	r25
 3e8:	82 95       	swap	r24
 3ea:	8f 70       	andi	r24, 0x0F	; 15
 3ec:	89 27       	eor	r24, r25
 3ee:	9f 70       	andi	r25, 0x0F	; 15
 3f0:	89 27       	eor	r24, r25
 3f2:	bc 01       	movw	r22, r24
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	9b 01       	movw	r18, r22
 3fa:	28 0f       	add	r18, r24
 3fc:	39 1f       	adc	r19, r25
 3fe:	b4 2e       	mov	r11, r20
 400:	f8 e0       	ldi	r31, 0x08	; 8
 402:	2f 9f       	mul	r18, r31
 404:	b0 18       	sub	r11, r0
 406:	11 24       	eor	r1, r1
	//loc = 0/1

	//setColor_RGB(LED, RRGGBB);

	uint8_t idx, height;
	uint8_t led = 56 + (loc*5);
 408:	ac 2e       	mov	r10, r28
 40a:	aa 0c       	add	r10, r10
 40c:	aa 0c       	add	r10, r10
 40e:	ec 2f       	mov	r30, r28
 410:	ea 0d       	add	r30, r10
 412:	0f 2e       	mov	r0, r31
 414:	f8 e3       	ldi	r31, 0x38	; 56
 416:	af 2e       	mov	r10, r31
 418:	f0 2d       	mov	r31, r0
 41a:	ae 0e       	add	r10, r30
		
		default:
		return 0; //exit routine, dont display anything
	}
	
	for(idx = 0; idx < (height/3); idx++) {
 41c:	0b ea       	ldi	r16, 0xAB	; 171
 41e:	b0 9e       	mul	r11, r16
 420:	01 2d       	mov	r16, r1
 422:	11 24       	eor	r1, r1
 424:	06 95       	lsr	r16
 426:	29 f4       	brne	.+10     	; 0x432 <drawBar+0x26e>
 428:	ca 2d       	mov	r28, r10
 42a:	d0 e0       	ldi	r29, 0x00	; 0
 42c:	e8 97       	sbiw	r28, 0x38	; 56
 42e:	17 e0       	ldi	r17, 0x07	; 7
 430:	1b c0       	rjmp	.+54     	; 0x468 <drawBar+0x2a4>
 432:	ca 2d       	mov	r28, r10
 434:	d0 e0       	ldi	r29, 0x00	; 0
 436:	10 e0       	ldi	r17, 0x00	; 0
		setColor_RGB(led - (idx*8), color);
 438:	b7 01       	movw	r22, r14
 43a:	a6 01       	movw	r20, r12
 43c:	ce 01       	movw	r24, r28
 43e:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led + 1 - (idx*8), color);
 442:	b7 01       	movw	r22, r14
 444:	a6 01       	movw	r20, r12
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led + 2 - (idx*8), color);
 44e:	b7 01       	movw	r22, r14
 450:	a6 01       	movw	r20, r12
 452:	ce 01       	movw	r24, r28
 454:	02 96       	adiw	r24, 0x02	; 2
 456:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		
		default:
		return 0; //exit routine, dont display anything
	}
	
	for(idx = 0; idx < (height/3); idx++) {
 45a:	1f 5f       	subi	r17, 0xFF	; 255
 45c:	28 97       	sbiw	r28, 0x08	; 8
 45e:	10 13       	cpse	r17, r16
 460:	eb cf       	rjmp	.-42     	; 0x438 <drawBar+0x274>
		setColor_RGB(led - (idx*8), color);
		setColor_RGB(led + 1 - (idx*8), color);
		setColor_RGB(led + 2 - (idx*8), color);
	}
	
	for(idx = 7; idx > (height/3); idx--) {
 462:	07 30       	cpi	r16, 0x07	; 7
 464:	08 f3       	brcs	.-62     	; 0x428 <drawBar+0x264>
 466:	18 c0       	rjmp	.+48     	; 0x498 <drawBar+0x2d4>
		setColor_RGB(led - (idx*8), 0);
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	ba 01       	movw	r22, r20
 46e:	ce 01       	movw	r24, r28
 470:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led + 1 - (idx*8), 0);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	ba 01       	movw	r22, r20
 47a:	ce 01       	movw	r24, r28
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led + 2 - (idx*8), 0);
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	ba 01       	movw	r22, r20
 488:	ce 01       	movw	r24, r28
 48a:	02 96       	adiw	r24, 0x02	; 2
 48c:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led - (idx*8), color);
		setColor_RGB(led + 1 - (idx*8), color);
		setColor_RGB(led + 2 - (idx*8), color);
	}
	
	for(idx = 7; idx > (height/3); idx--) {
 490:	11 50       	subi	r17, 0x01	; 1
 492:	28 96       	adiw	r28, 0x08	; 8
 494:	01 17       	cp	r16, r17
 496:	40 f3       	brcs	.-48     	; 0x468 <drawBar+0x2a4>
		setColor_RGB(led - (idx*8), 0);
		setColor_RGB(led + 1 - (idx*8), 0);
		setColor_RGB(led + 2 - (idx*8), 0);
	}
	
	if (height % 3 == 1) {
 498:	8b ea       	ldi	r24, 0xAB	; 171
 49a:	b8 9e       	mul	r11, r24
 49c:	81 2d       	mov	r24, r1
 49e:	11 24       	eor	r1, r1
 4a0:	86 95       	lsr	r24
 4a2:	98 2f       	mov	r25, r24
 4a4:	99 0f       	add	r25, r25
 4a6:	89 0f       	add	r24, r25
 4a8:	9b 2d       	mov	r25, r11
 4aa:	98 1b       	sub	r25, r24
 4ac:	91 30       	cpi	r25, 0x01	; 1
 4ae:	69 f5       	brne	.+90     	; 0x50a <drawBar+0x346>
		setColor_RGB(led - ((height-1)/3)*8, 0);
 4b0:	0a 2d       	mov	r16, r10
 4b2:	10 e0       	ldi	r17, 0x00	; 0
 4b4:	8b 2d       	mov	r24, r11
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	63 e0       	ldi	r22, 0x03	; 3
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divmodhi4>
 4c2:	cc 27       	eor	r28, r28
 4c4:	dd 27       	eor	r29, r29
 4c6:	c6 1b       	sub	r28, r22
 4c8:	d7 0b       	sbc	r29, r23
 4ca:	cc 0f       	add	r28, r28
 4cc:	dd 1f       	adc	r29, r29
 4ce:	cc 0f       	add	r28, r28
 4d0:	dd 1f       	adc	r29, r29
 4d2:	cc 0f       	add	r28, r28
 4d4:	dd 1f       	adc	r29, r29
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	ba 01       	movw	r22, r20
 4dc:	c8 01       	movw	r24, r16
 4de:	8c 0f       	add	r24, r28
 4e0:	9d 1f       	adc	r25, r29
 4e2:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led + 1 - ((height-1)/3)*8, 0);
 4e6:	c8 01       	movw	r24, r16
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	ba 01       	movw	r22, r20
 4f0:	8c 0f       	add	r24, r28
 4f2:	9d 1f       	adc	r25, r29
 4f4:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led + 2 - ((height-1)/3)*8, color);
 4f8:	c8 01       	movw	r24, r16
 4fa:	02 96       	adiw	r24, 0x02	; 2
 4fc:	b7 01       	movw	r22, r14
 4fe:	a6 01       	movw	r20, r12
 500:	8c 0f       	add	r24, r28
 502:	9d 1f       	adc	r25, r29
 504:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
 508:	2d c0       	rjmp	.+90     	; 0x564 <drawBar+0x3a0>
	}
	else if (height % 3 == 2) {
 50a:	92 30       	cpi	r25, 0x02	; 2
 50c:	59 f5       	brne	.+86     	; 0x564 <drawBar+0x3a0>
		setColor_RGB(led - ((height-2)/3)*8, 0);
 50e:	0a 2d       	mov	r16, r10
 510:	10 e0       	ldi	r17, 0x00	; 0
 512:	8b 2d       	mov	r24, r11
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 97       	sbiw	r24, 0x02	; 2
 518:	63 e0       	ldi	r22, 0x03	; 3
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divmodhi4>
 520:	cc 27       	eor	r28, r28
 522:	dd 27       	eor	r29, r29
 524:	c6 1b       	sub	r28, r22
 526:	d7 0b       	sbc	r29, r23
 528:	cc 0f       	add	r28, r28
 52a:	dd 1f       	adc	r29, r29
 52c:	cc 0f       	add	r28, r28
 52e:	dd 1f       	adc	r29, r29
 530:	cc 0f       	add	r28, r28
 532:	dd 1f       	adc	r29, r29
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	ba 01       	movw	r22, r20
 53a:	c8 01       	movw	r24, r16
 53c:	8c 0f       	add	r24, r28
 53e:	9d 1f       	adc	r25, r29
 540:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led + 1 - ((height-2)/3)*8, color);
 544:	c8 01       	movw	r24, r16
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	b7 01       	movw	r22, r14
 54a:	a6 01       	movw	r20, r12
 54c:	8c 0f       	add	r24, r28
 54e:	9d 1f       	adc	r25, r29
 550:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
		setColor_RGB(led + 2 - ((height-2)/3)*8, color);
 554:	c8 01       	movw	r24, r16
 556:	02 96       	adiw	r24, 0x02	; 2
 558:	b7 01       	movw	r22, r14
 55a:	a6 01       	movw	r20, r12
 55c:	8c 0f       	add	r24, r28
 55e:	9d 1f       	adc	r25, r29
 560:	0e 94 22 03 	call	0x644	; 0x644 <setColor_RGB>
	}

	
	show();
 564:	0e 94 8c 03 	call	0x718	; 0x718 <show>
	return 1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <drawBar+0x3ae>
		
		height = metric % 24;
		break;
		
		default:
		return 0; //exit routine, dont display anything
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
	}

	
	show();
	return 1;
}
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	ff 90       	pop	r15
 57c:	ef 90       	pop	r14
 57e:	df 90       	pop	r13
 580:	cf 90       	pop	r12
 582:	bf 90       	pop	r11
 584:	af 90       	pop	r10
 586:	08 95       	ret

00000588 <main>:
	int cycles = 1;
	usbInit(9600);
	usbWrite("Initializing...\n\r");
	#endif
	
	while (!canInit(SPEED500)) {
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 81 00 	call	0x102	; 0x102 <canInit>
 594:	88 23       	and	r24, r24
 596:	c1 f3       	breq	.-16     	; 0x588 <main>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 598:	8f e3       	ldi	r24, 0x3F	; 63
 59a:	9c e9       	ldi	r25, 0x9C	; 156
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <main+0x14>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <main+0x1a>
 5a2:	00 00       	nop
	usbWrite("MCP2515 Initialized!\n\r");
	usbWrite("--------------------------------------\n\r");
	#endif
	
	_delay_ms(10);
	ledInit();
 5a4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ledInit>
 5a8:	9f ef       	ldi	r25, 0xFF	; 255
 5aa:	29 e6       	ldi	r18, 0x69	; 105
 5ac:	88 e1       	ldi	r24, 0x18	; 24
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	20 40       	sbci	r18, 0x00	; 0
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0x26>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x30>
 5b8:	00 00       	nop
	_delay_ms(500);
	
	uint16_t rpmtemp = 500, speedtemp = 0;	//from min
 5ba:	c0 e0       	ldi	r28, 0x00	; 0
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
 5be:	04 ef       	ldi	r16, 0xF4	; 244
 5c0:	11 e0       	ldi	r17, 0x01	; 1
 		speedtemp += 1;
// 		usbWrite(" Speed: ");
// 		usbWrite(itoa(speedtemp, buffa, 10));
 		drawBar(1, speedtemp, VEHICLE_SPEED);
// 		
 		rpmtemp = rpmtemp > 7200 ? 500 : rpmtemp;
 5c2:	0f 2e       	mov	r0, r31
 5c4:	f4 ef       	ldi	r31, 0xF4	; 244
 5c6:	cf 2e       	mov	r12, r31
 5c8:	f0 2d       	mov	r31, r0
 5ca:	dd 24       	eor	r13, r13
 5cc:	d3 94       	inc	r13
 		speedtemp = speedtemp > 130 ? 0 : speedtemp;
 5ce:	e1 2c       	mov	r14, r1
 5d0:	f1 2c       	mov	r15, r1
		
///* Run through for diagnostics

// 		char buffa[99];
// 
 		rpmtemp += 20;
 5d2:	0c 5e       	subi	r16, 0xEC	; 236
 5d4:	1f 4f       	sbci	r17, 0xFF	; 255
// 		usbWrite("RPM: ");
// 		usbWrite(itoa(rpmtemp, buffa, 10));
 		drawBar(0, rpmtemp, ENGINE_RPM);
 5d6:	4c e0       	ldi	r20, 0x0C	; 12
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	b8 01       	movw	r22, r16
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <drawBar>
// 
 		speedtemp += 1;
 5e2:	21 96       	adiw	r28, 0x01	; 1
// 		usbWrite(" Speed: ");
// 		usbWrite(itoa(speedtemp, buffa, 10));
 		drawBar(1, speedtemp, VEHICLE_SPEED);
 5e4:	4d e0       	ldi	r20, 0x0D	; 13
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	be 01       	movw	r22, r28
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <drawBar>
// 		
 		rpmtemp = rpmtemp > 7200 ? 500 : rpmtemp;
 5f0:	01 32       	cpi	r16, 0x21	; 33
 5f2:	9c e1       	ldi	r25, 0x1C	; 28
 5f4:	19 07       	cpc	r17, r25
 5f6:	10 f0       	brcs	.+4      	; 0x5fc <main+0x74>
 5f8:	0c 2d       	mov	r16, r12
 5fa:	1d 2d       	mov	r17, r13
 		speedtemp = speedtemp > 130 ? 0 : speedtemp;
 5fc:	c3 38       	cpi	r28, 0x83	; 131
 5fe:	d1 05       	cpc	r29, r1
 600:	10 f0       	brcs	.+4      	; 0x606 <main+0x7e>
 602:	ce 2d       	mov	r28, r14
 604:	df 2d       	mov	r29, r15
 606:	9f ef       	ldi	r25, 0xFF	; 255
 608:	21 ee       	ldi	r18, 0xE1	; 225
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	91 50       	subi	r25, 0x01	; 1
 60e:	20 40       	sbci	r18, 0x00	; 0
 610:	80 40       	sbci	r24, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <main+0x84>
 614:	00 c0       	rjmp	.+0      	; 0x616 <main+0x8e>
 616:	00 00       	nop
 618:	dc cf       	rjmp	.-72     	; 0x5d2 <main+0x4a>

0000061a <setPin>:
}


void setPin(uint8_t _port, uint8_t _bit)
{
	*(volatile uint8_t *)(_port - 0x01) |= ( 1 << _bit );
 61a:	e8 2f       	mov	r30, r24
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	df 01       	movw	r26, r30
 620:	2e 91       	ld	r18, -X
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	ac 01       	movw	r20, r24
 628:	02 c0       	rjmp	.+4      	; 0x62e <setPin+0x14>
 62a:	44 0f       	add	r20, r20
 62c:	55 1f       	adc	r21, r21
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <setPin+0x10>
 632:	ba 01       	movw	r22, r20
 634:	82 2f       	mov	r24, r18
 636:	84 2b       	or	r24, r20
 638:	8c 93       	st	X, r24
	*(volatile uint8_t *)_port &= ~( 1 << _bit );
 63a:	80 81       	ld	r24, Z
 63c:	60 95       	com	r22
 63e:	68 23       	and	r22, r24
 640:	60 83       	st	Z, r22
 642:	08 95       	ret

00000644 <setColor_RGB>:
	}
}


void setColor_RGB(uint16_t n, uint32_t c)
{
 644:	cf 92       	push	r12
 646:	df 92       	push	r13
 648:	ef 92       	push	r14
 64a:	ff 92       	push	r15
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
	if(n < nCells)
 652:	20 91 0c 01 	lds	r18, 0x010C
 656:	30 91 0d 01 	lds	r19, 0x010D
 65a:	82 17       	cp	r24, r18
 65c:	93 07       	cpc	r25, r19
 65e:	08 f0       	brcs	.+2      	; 0x662 <setColor_RGB+0x1e>
 660:	53 c0       	rjmp	.+166    	; 0x708 <setColor_RGB+0xc4>
	{
		uint8_t 
			r = (uint8_t)(c >> 16),
 662:	8b 01       	movw	r16, r22
 664:	22 27       	eor	r18, r18
 666:	33 27       	eor	r19, r19
 668:	b0 2f       	mov	r27, r16
			g = (uint8_t)(c >>  8),
 66a:	c5 2e       	mov	r12, r21
 66c:	d6 2e       	mov	r13, r22
 66e:	e7 2e       	mov	r14, r23
 670:	ff 24       	eor	r15, r15
 672:	ac 2d       	mov	r26, r12
			b = (uint8_t)c;
 674:	c4 2f       	mov	r28, r20

		if(brightness < 0xFF)
 676:	e0 91 06 01 	lds	r30, 0x0106
 67a:	ef 3f       	cpi	r30, 0xFF	; 255
 67c:	b9 f1       	breq	.+110    	; 0x6ec <setColor_RGB+0xa8>
		{
			if(brightness > 0x01)
 67e:	e0 91 06 01 	lds	r30, 0x0106
 682:	e2 30       	cpi	r30, 0x02	; 2
 684:	70 f1       	brcs	.+92     	; 0x6e2 <setColor_RGB+0x9e>
			{
				uint16_t cb = brightness + 1, t = 0;
 686:	e0 91 06 01 	lds	r30, 0x0106
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	31 96       	adiw	r30, 0x01	; 1
    		
	    		t = (g|0x01) * cb;
 68e:	cc 2d       	mov	r28, r12
 690:	c1 60       	ori	r28, 0x01	; 1
 692:	ce 9f       	mul	r28, r30
 694:	d0 01       	movw	r26, r0
 696:	cf 9f       	mul	r28, r31
 698:	b0 0d       	add	r27, r0
 69a:	11 24       	eor	r1, r1
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
 69c:	a1 38       	cpi	r26, 0x81	; 129
 69e:	b1 05       	cpc	r27, r1
 6a0:	20 f0       	brcs	.+8      	; 0x6aa <setColor_RGB+0x66>
 6a2:	a0 58       	subi	r26, 0x80	; 128
 6a4:	b1 09       	sbc	r27, r1
 6a6:	ab 2f       	mov	r26, r27
 6a8:	01 c0       	rjmp	.+2      	; 0x6ac <setColor_RGB+0x68>
 6aa:	a0 e0       	ldi	r26, 0x00	; 0
	    		t = (r|0x01) * cb;
 6ac:	01 60       	ori	r16, 0x01	; 1
 6ae:	0e 9f       	mul	r16, r30
 6b0:	90 01       	movw	r18, r0
 6b2:	0f 9f       	mul	r16, r31
 6b4:	30 0d       	add	r19, r0
 6b6:	11 24       	eor	r1, r1
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
 6b8:	21 38       	cpi	r18, 0x81	; 129
 6ba:	31 05       	cpc	r19, r1
 6bc:	20 f0       	brcs	.+8      	; 0x6c6 <setColor_RGB+0x82>
 6be:	20 58       	subi	r18, 0x80	; 128
 6c0:	31 09       	sbc	r19, r1
 6c2:	b3 2f       	mov	r27, r19
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <setColor_RGB+0x84>
 6c6:	b0 e0       	ldi	r27, 0x00	; 0
	    		t = (b|0x01) * cb;
 6c8:	41 60       	ori	r20, 0x01	; 1
 6ca:	4e 9f       	mul	r20, r30
 6cc:	90 01       	movw	r18, r0
 6ce:	4f 9f       	mul	r20, r31
 6d0:	30 0d       	add	r19, r0
 6d2:	11 24       	eor	r1, r1
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 6d4:	21 38       	cpi	r18, 0x81	; 129
 6d6:	31 05       	cpc	r19, r1
 6d8:	40 f0       	brcs	.+16     	; 0x6ea <setColor_RGB+0xa6>
 6da:	20 58       	subi	r18, 0x80	; 128
 6dc:	31 09       	sbc	r19, r1
 6de:	c3 2f       	mov	r28, r19
 6e0:	05 c0       	rjmp	.+10     	; 0x6ec <setColor_RGB+0xa8>
			}			
			else
			{
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
 6e2:	c0 e0       	ldi	r28, 0x00	; 0
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
			}			
			else
			{
    			g = 0x00;
 6e4:	a0 e0       	ldi	r26, 0x00	; 0
    			r = 0x00;
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <setColor_RGB+0xa8>
	    		t = (g|0x01) * cb;
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
	    		t = (r|0x01) * cb;
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 6ea:	c0 e0       	ldi	r28, 0x00	; 0
    			r = 0x00;
    			b = 0x00;
			}
		}

		uint8_t *p = &cells[n * 3];
 6ec:	fc 01       	movw	r30, r24
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	8e 0f       	add	r24, r30
 6f4:	9f 1f       	adc	r25, r31
 6f6:	e0 91 10 01 	lds	r30, 0x0110
 6fa:	f0 91 11 01 	lds	r31, 0x0111
 6fe:	e8 0f       	add	r30, r24
 700:	f9 1f       	adc	r31, r25

		*p++ = g;
 702:	a0 83       	st	Z, r26
		*p++ = r;
 704:	b1 83       	std	Z+1, r27	; 0x01
		*p = b;
 706:	c2 83       	std	Z+2, r28	; 0x02
	}
}
 708:	cf 91       	pop	r28
 70a:	1f 91       	pop	r17
 70c:	0f 91       	pop	r16
 70e:	ff 90       	pop	r15
 710:	ef 90       	pop	r14
 712:	df 90       	pop	r13
 714:	cf 90       	pop	r12
 716:	08 95       	ret

00000718 <show>:


void show(void)
{
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	27 97       	sbiw	r28, 0x07	; 7
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 72c:	87 ec       	ldi	r24, 0xC7	; 199
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <show+0x18>
 734:	00 c0       	rjmp	.+0      	; 0x736 <show+0x1e>
 736:	00 00       	nop
	rst_delay();								// 50us Delay
	asm volatile("cli");						// interrupt Disable
 738:	f8 94       	cli

	volatile uint16_t loopcnt_i = nBytes;		// loop counter : led * 3 byte
 73a:	80 91 0a 01 	lds	r24, 0x010A
 73e:	90 91 0b 01 	lds	r25, 0x010B
 742:	9a 83       	std	Y+2, r25	; 0x02
 744:	89 83       	std	Y+1, r24	; 0x01

	volatile uint8_t
		*ptr = cells,
 746:	e0 91 10 01 	lds	r30, 0x0110
 74a:	f0 91 11 01 	lds	r31, 0x0111
		curbyte = *ptr++;
 74e:	df 01       	movw	r26, r30
 750:	11 96       	adiw	r26, 0x01	; 1
 752:	80 81       	ld	r24, Z
 754:	8b 83       	std	Y+3, r24	; 0x03

	volatile uint8_t next, bit, high, low;

	high = *port | maskPin;
 756:	e0 91 0e 01 	lds	r30, 0x010E
 75a:	f0 91 0f 01 	lds	r31, 0x010F
 75e:	90 81       	ld	r25, Z
 760:	80 91 12 01 	lds	r24, 0x0112
 764:	89 2b       	or	r24, r25
 766:	8e 83       	std	Y+6, r24	; 0x06
	low = *port & ~maskPin;
 768:	90 81       	ld	r25, Z
 76a:	80 91 12 01 	lds	r24, 0x0112
 76e:	80 95       	com	r24
 770:	89 23       	and	r24, r25
 772:	8f 83       	std	Y+7, r24	; 0x07

	next = low;
 774:	8f 81       	ldd	r24, Y+7	; 0x07
 776:	8c 83       	std	Y+4, r24	; 0x04
	bit = 8;
 778:	88 e0       	ldi	r24, 0x08	; 8
 77a:	8d 83       	std	Y+5, r24	; 0x05

	asm volatile(
 77c:	5e 81       	ldd	r21, Y+6	; 0x06
 77e:	6f 81       	ldd	r22, Y+7	; 0x07
 780:	4b 81       	ldd	r20, Y+3	; 0x03
 782:	3d 81       	ldd	r19, Y+5	; 0x05
 784:	2c 81       	ldd	r18, Y+4	; 0x04
 786:	89 81       	ldd	r24, Y+1	; 0x01
 788:	9a 81       	ldd	r25, Y+2	; 0x02

0000078a <run>:
 78a:	50 83       	st	Z, r21
 78c:	47 fd       	sbrc	r20, 7
 78e:	25 2f       	mov	r18, r21
 790:	20 83       	st	Z, r18
 792:	26 2f       	mov	r18, r22
 794:	3a 95       	dec	r19
 796:	39 f0       	breq	.+14     	; 0x7a6 <nextByte>
 798:	44 0f       	add	r20, r20
 79a:	00 c0       	rjmp	.+0      	; 0x79c <run+0x12>
 79c:	00 00       	nop
 79e:	60 83       	st	Z, r22
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <run+0x18>
 7a2:	00 00       	nop
 7a4:	f2 cf       	rjmp	.-28     	; 0x78a <run>

000007a6 <nextByte>:
 7a6:	4d 91       	ld	r20, X+
 7a8:	60 83       	st	Z, r22
 7aa:	38 e0       	ldi	r19, 0x08	; 8
 7ac:	00 00       	nop
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	61 f7       	brne	.-40     	; 0x78a <run>
 7b2:	f0 93 0f 01 	sts	0x010F, r31
 7b6:	e0 93 0e 01 	sts	0x010E, r30
 7ba:	4b 83       	std	Y+3, r20	; 0x03
 7bc:	3d 83       	std	Y+5, r19	; 0x05
 7be:	2c 83       	std	Y+4, r18	; 0x04
 7c0:	9a 83       	std	Y+2, r25	; 0x02
 7c2:	89 83       	std	Y+1, r24	; 0x01
		[count] "+w" (loopcnt_i)
		: [ptr]   "e"  (ptr),
		[high]  "r"  (high),
		[low]   "r"  (low));

	asm volatile("sei");						// interrupt Enable
 7c4:	78 94       	sei
 7c6:	87 ec       	ldi	r24, 0xC7	; 199
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <nextByte+0x24>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <nextByte+0x2a>
 7d0:	00 00       	nop
	rst_delay();								// 50us Delay	
}
 7d2:	27 96       	adiw	r28, 0x07	; 7
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	08 95       	ret

000007e4 <NS_Rainbow_init>:
void delay(uint32_t _mstime) {while(_mstime){_delay_loop_2(((F_CPU) / 4e3));_mstime--;}}


// Initializer Func
void NS_Rainbow_init(uint16_t _numled, volatile uint8_t _port, uint8_t _outbit)
{
 7e4:	ff 92       	push	r15
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	1f 92       	push	r1
 7f0:	cd b7       	in	r28, 0x3d	; 61
 7f2:	de b7       	in	r29, 0x3e	; 62
 7f4:	8c 01       	movw	r16, r24
 7f6:	69 83       	std	Y+1, r22	; 0x01
 7f8:	f4 2e       	mov	r15, r20
	setPin(_port, _outbit);
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	64 2f       	mov	r22, r20
 7fe:	0e 94 0d 03 	call	0x61a	; 0x61a <setPin>
	port = (volatile uint8_t *)_port;
 802:	89 81       	ldd	r24, Y+1	; 0x01
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	90 93 0f 01 	sts	0x010F, r25
 80a:	80 93 0e 01 	sts	0x010E, r24
	maskPin = ( 1 << _outbit );
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	ac 01       	movw	r20, r24
 814:	02 c0       	rjmp	.+4      	; 0x81a <NS_Rainbow_init+0x36>
 816:	44 0f       	add	r20, r20
 818:	55 1f       	adc	r21, r21
 81a:	fa 94       	dec	r15
 81c:	e2 f7       	brpl	.-8      	; 0x816 <NS_Rainbow_init+0x32>
 81e:	40 93 12 01 	sts	0x0112, r20
	
	nCells		= _numled;
 822:	10 93 0d 01 	sts	0x010D, r17
 826:	00 93 0c 01 	sts	0x010C, r16
	nBytes		= maxLEDBytes;
 82a:	80 91 07 01 	lds	r24, 0x0107
 82e:	90 91 08 01 	lds	r25, 0x0108
 832:	90 93 0b 01 	sts	0x010B, r25
 836:	80 93 0a 01 	sts	0x010A, r24

	brightness = DEFALUT_BRIGHT;						
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	80 93 06 01 	sts	0x0106, r24
		
	if((cells = (uint8_t *)malloc(nBytes)))		// MAXLED(Default=64) Size LED Clear
 840:	80 91 0a 01 	lds	r24, 0x010A
 844:	90 91 0b 01 	lds	r25, 0x010B
 848:	0e 94 ba 05 	call	0xb74	; 0xb74 <malloc>
 84c:	90 93 11 01 	sts	0x0111, r25
 850:	80 93 10 01 	sts	0x0110, r24
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	41 f0       	breq	.+16     	; 0x868 <NS_Rainbow_init+0x84>
		memset(cells, 0, nBytes);
 858:	40 91 0a 01 	lds	r20, 0x010A
 85c:	50 91 0b 01 	lds	r21, 0x010B
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <memset>
	show();
 868:	0e 94 8c 03 	call	0x718	; 0x718 <show>
	free(cells);
 86c:	80 91 10 01 	lds	r24, 0x0110
 870:	90 91 11 01 	lds	r25, 0x0111
 874:	0e 94 52 06 	call	0xca4	; 0xca4 <free>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 878:	2f ef       	ldi	r18, 0xFF	; 255
 87a:	80 e7       	ldi	r24, 0x70	; 112
 87c:	92 e0       	ldi	r25, 0x02	; 2
 87e:	21 50       	subi	r18, 0x01	; 1
 880:	80 40       	sbci	r24, 0x00	; 0
 882:	90 40       	sbci	r25, 0x00	; 0
 884:	e1 f7       	brne	.-8      	; 0x87e <NS_Rainbow_init+0x9a>
 886:	00 c0       	rjmp	.+0      	; 0x888 <NS_Rainbow_init+0xa4>
 888:	00 00       	nop
	_delay_ms(50);								// Stabilizer Delay

	nBytes = _numled * 3;
 88a:	c8 01       	movw	r24, r16
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	08 0f       	add	r16, r24
 892:	19 1f       	adc	r17, r25
 894:	10 93 0b 01 	sts	0x010B, r17
 898:	00 93 0a 01 	sts	0x010A, r16
	if((cells = (uint8_t *)malloc(nBytes)))
 89c:	80 91 0a 01 	lds	r24, 0x010A
 8a0:	90 91 0b 01 	lds	r25, 0x010B
 8a4:	0e 94 ba 05 	call	0xb74	; 0xb74 <malloc>
 8a8:	90 93 11 01 	sts	0x0111, r25
 8ac:	80 93 10 01 	sts	0x0110, r24
 8b0:	00 97       	sbiw	r24, 0x00	; 0
 8b2:	41 f0       	breq	.+16     	; 0x8c4 <NS_Rainbow_init+0xe0>
		memset(cells, 0, nBytes);
 8b4:	40 91 0a 01 	lds	r20, 0x010A
 8b8:	50 91 0b 01 	lds	r21, 0x010B
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <memset>
	
}
 8c4:	0f 90       	pop	r0
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	ff 90       	pop	r15
 8d0:	08 95       	ret

000008d2 <setBrightness>:
}



void setBrightness(uint8_t b)
{
 8d2:	4f 92       	push	r4
 8d4:	5f 92       	push	r5
 8d6:	6f 92       	push	r6
 8d8:	7f 92       	push	r7
 8da:	8f 92       	push	r8
 8dc:	9f 92       	push	r9
 8de:	af 92       	push	r10
 8e0:	bf 92       	push	r11
 8e2:	df 92       	push	r13
 8e4:	ef 92       	push	r14
 8e6:	ff 92       	push	r15
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	d8 2e       	mov	r13, r24
	if( b != brightness )
 8f2:	80 91 06 01 	lds	r24, 0x0106
 8f6:	d8 16       	cp	r13, r24
 8f8:	09 f4       	brne	.+2      	; 0x8fc <setBrightness+0x2a>
 8fa:	ba c0       	rjmp	.+372    	; 0xa70 <__stack+0x171>
	{
		uint8_t *ptr = cells;
 8fc:	30 91 10 01 	lds	r19, 0x0110
 900:	20 91 11 01 	lds	r18, 0x0111
		uint16_t nb = b + 1, cb = brightness + 1;
 904:	80 90 06 01 	lds	r8, 0x0106
 908:	91 2c       	mov	r9, r1
 90a:	8f ef       	ldi	r24, 0xFF	; 255
 90c:	88 1a       	sub	r8, r24
 90e:	98 0a       	sbc	r9, r24
	
		if (b < 1)
 910:	d1 10       	cpse	r13, r1
 912:	37 c0       	rjmp	.+110    	; 0x982 <__stack+0x83>
		{
			for(uint16_t i = 0; i < nBytes; i++)
 914:	80 91 0a 01 	lds	r24, 0x010A
 918:	90 91 0b 01 	lds	r25, 0x010B
 91c:	89 2b       	or	r24, r25
 91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0x23>
 920:	a5 c0       	rjmp	.+330    	; 0xa6c <__stack+0x16d>
 922:	c3 2f       	mov	r28, r19
 924:	d2 2f       	mov	r29, r18
 926:	e3 2e       	mov	r14, r19
 928:	f2 2e       	mov	r15, r18
 92a:	00 e0       	ldi	r16, 0x00	; 0
 92c:	10 e0       	ldi	r17, 0x00	; 0
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 92e:	a1 2c       	mov	r10, r1
 930:	b1 2c       	mov	r11, r1
 932:	f7 01       	movw	r30, r14
 934:	81 91       	ld	r24, Z+
 936:	7f 01       	movw	r14, r30
 938:	88 23       	and	r24, r24
 93a:	b9 f0       	breq	.+46     	; 0x96a <__stack+0x6b>
 93c:	69 81       	ldd	r22, Y+1	; 0x01
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	6f 5f       	subi	r22, 0xFF	; 255
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	cb 01       	movw	r24, r22
 946:	aa 27       	eor	r26, r26
 948:	97 fd       	sbrc	r25, 7
 94a:	a0 95       	com	r26
 94c:	ba 2f       	mov	r27, r26
 94e:	77 27       	eor	r23, r23
 950:	66 27       	eor	r22, r22
 952:	a5 01       	movw	r20, r10
 954:	94 01       	movw	r18, r8
 956:	0e 94 70 05 	call	0xae0	; 0xae0 <__udivmodsi4>
 95a:	ba 01       	movw	r22, r20
 95c:	a9 01       	movw	r20, r18
 95e:	40 58       	subi	r20, 0x80	; 128
 960:	51 09       	sbc	r21, r1
 962:	61 09       	sbc	r22, r1
 964:	71 09       	sbc	r23, r1
 966:	58 83       	st	Y, r21
 968:	01 c0       	rjmp	.+2      	; 0x96c <__stack+0x6d>
 96a:	18 82       	st	Y, r1
		uint8_t *ptr = cells;
		uint16_t nb = b + 1, cb = brightness + 1;
	
		if (b < 1)
		{
			for(uint16_t i = 0; i < nBytes; i++)
 96c:	0f 5f       	subi	r16, 0xFF	; 255
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	80 91 0a 01 	lds	r24, 0x010A
 974:	90 91 0b 01 	lds	r25, 0x010B
 978:	21 96       	adiw	r28, 0x01	; 1
 97a:	08 17       	cp	r16, r24
 97c:	19 07       	cpc	r17, r25
 97e:	c8 f2       	brcs	.-78     	; 0x932 <__stack+0x33>
 980:	75 c0       	rjmp	.+234    	; 0xa6c <__stack+0x16d>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
 982:	ff ef       	ldi	r31, 0xFF	; 255
 984:	df 16       	cp	r13, r31
 986:	39 f0       	breq	.+14     	; 0x996 <__stack+0x97>
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
 988:	80 91 0a 01 	lds	r24, 0x010A
 98c:	90 91 0b 01 	lds	r25, 0x010B
 990:	89 2b       	or	r24, r25
 992:	c1 f5       	brne	.+112    	; 0xa04 <__stack+0x105>
 994:	6b c0       	rjmp	.+214    	; 0xa6c <__stack+0x16d>
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
		{
			for (uint16_t i = 0; i < nBytes; i++)
 996:	80 91 0a 01 	lds	r24, 0x010A
 99a:	90 91 0b 01 	lds	r25, 0x010B
 99e:	89 2b       	or	r24, r25
 9a0:	09 f4       	brne	.+2      	; 0x9a4 <__stack+0xa5>
 9a2:	64 c0       	rjmp	.+200    	; 0xa6c <__stack+0x16d>
 9a4:	c3 2f       	mov	r28, r19
 9a6:	d2 2f       	mov	r29, r18
 9a8:	e3 2e       	mov	r14, r19
 9aa:	f2 2e       	mov	r15, r18
 9ac:	00 e0       	ldi	r16, 0x00	; 0
 9ae:	10 e0       	ldi	r17, 0x00	; 0
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 9b0:	a1 2c       	mov	r10, r1
 9b2:	b1 2c       	mov	r11, r1
 9b4:	f7 01       	movw	r30, r14
 9b6:	81 91       	ld	r24, Z+
 9b8:	7f 01       	movw	r14, r30
 9ba:	88 23       	and	r24, r24
 9bc:	b9 f0       	breq	.+46     	; 0x9ec <__stack+0xed>
 9be:	69 81       	ldd	r22, Y+1	; 0x01
 9c0:	70 e0       	ldi	r23, 0x00	; 0
 9c2:	6f 5f       	subi	r22, 0xFF	; 255
 9c4:	7f 4f       	sbci	r23, 0xFF	; 255
 9c6:	cb 01       	movw	r24, r22
 9c8:	aa 27       	eor	r26, r26
 9ca:	97 fd       	sbrc	r25, 7
 9cc:	a0 95       	com	r26
 9ce:	ba 2f       	mov	r27, r26
 9d0:	77 27       	eor	r23, r23
 9d2:	66 27       	eor	r22, r22
 9d4:	a5 01       	movw	r20, r10
 9d6:	94 01       	movw	r18, r8
 9d8:	0e 94 70 05 	call	0xae0	; 0xae0 <__udivmodsi4>
 9dc:	da 01       	movw	r26, r20
 9de:	c9 01       	movw	r24, r18
 9e0:	80 58       	subi	r24, 0x80	; 128
 9e2:	91 09       	sbc	r25, r1
 9e4:	a1 09       	sbc	r26, r1
 9e6:	b1 09       	sbc	r27, r1
 9e8:	98 83       	st	Y, r25
 9ea:	01 c0       	rjmp	.+2      	; 0x9ee <__stack+0xef>
 9ec:	18 82       	st	Y, r1
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
		{
			for (uint16_t i = 0; i < nBytes; i++)
 9ee:	0f 5f       	subi	r16, 0xFF	; 255
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	80 91 0a 01 	lds	r24, 0x010A
 9f6:	90 91 0b 01 	lds	r25, 0x010B
 9fa:	21 96       	adiw	r28, 0x01	; 1
 9fc:	08 17       	cp	r16, r24
 9fe:	19 07       	cpc	r17, r25
 a00:	c8 f2       	brcs	.-78     	; 0x9b4 <__stack+0xb5>
 a02:	34 c0       	rjmp	.+104    	; 0xa6c <__stack+0x16d>
void setBrightness(uint8_t b)
{
	if( b != brightness )
	{
		uint8_t *ptr = cells;
		uint16_t nb = b + 1, cb = brightness + 1;
 a04:	4d 2c       	mov	r4, r13
 a06:	51 2c       	mov	r5, r1
 a08:	ff ef       	ldi	r31, 0xFF	; 255
 a0a:	4f 1a       	sub	r4, r31
 a0c:	5f 0a       	sbc	r5, r31
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
 a0e:	54 2c       	mov	r5, r4
 a10:	44 24       	eor	r4, r4
 a12:	61 2c       	mov	r6, r1
 a14:	71 2c       	mov	r7, r1
 a16:	c3 2f       	mov	r28, r19
 a18:	d2 2f       	mov	r29, r18
 a1a:	e3 2e       	mov	r14, r19
 a1c:	f2 2e       	mov	r15, r18
 a1e:	00 e0       	ldi	r16, 0x00	; 0
 a20:	10 e0       	ldi	r17, 0x00	; 0
 a22:	a1 2c       	mov	r10, r1
 a24:	b1 2c       	mov	r11, r1
 a26:	f7 01       	movw	r30, r14
 a28:	81 91       	ld	r24, Z+
 a2a:	7f 01       	movw	r14, r30
 a2c:	88 23       	and	r24, r24
 a2e:	99 f0       	breq	.+38     	; 0xa56 <__stack+0x157>
 a30:	a9 81       	ldd	r26, Y+1	; 0x01
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	11 96       	adiw	r26, 0x01	; 1
 a36:	a3 01       	movw	r20, r6
 a38:	92 01       	movw	r18, r4
 a3a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__mulshisi3>
 a3e:	a5 01       	movw	r20, r10
 a40:	94 01       	movw	r18, r8
 a42:	0e 94 70 05 	call	0xae0	; 0xae0 <__udivmodsi4>
 a46:	da 01       	movw	r26, r20
 a48:	c9 01       	movw	r24, r18
 a4a:	80 58       	subi	r24, 0x80	; 128
 a4c:	91 09       	sbc	r25, r1
 a4e:	a1 09       	sbc	r26, r1
 a50:	b1 09       	sbc	r27, r1
 a52:	98 83       	st	Y, r25
 a54:	01 c0       	rjmp	.+2      	; 0xa58 <__stack+0x159>
 a56:	18 82       	st	Y, r1
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
 a58:	0f 5f       	subi	r16, 0xFF	; 255
 a5a:	1f 4f       	sbci	r17, 0xFF	; 255
 a5c:	80 91 0a 01 	lds	r24, 0x010A
 a60:	90 91 0b 01 	lds	r25, 0x010B
 a64:	21 96       	adiw	r28, 0x01	; 1
 a66:	08 17       	cp	r16, r24
 a68:	19 07       	cpc	r17, r25
 a6a:	e8 f2       	brcs	.-70     	; 0xa26 <__stack+0x127>
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		brightness = b;	
 a6c:	d0 92 06 01 	sts	0x0106, r13
	}
}
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	1f 91       	pop	r17
 a76:	0f 91       	pop	r16
 a78:	ff 90       	pop	r15
 a7a:	ef 90       	pop	r14
 a7c:	df 90       	pop	r13
 a7e:	bf 90       	pop	r11
 a80:	af 90       	pop	r10
 a82:	9f 90       	pop	r9
 a84:	8f 90       	pop	r8
 a86:	7f 90       	pop	r7
 a88:	6f 90       	pop	r6
 a8a:	5f 90       	pop	r5
 a8c:	4f 90       	pop	r4
 a8e:	08 95       	ret

00000a90 <__udivmodhi4>:
 a90:	aa 1b       	sub	r26, r26
 a92:	bb 1b       	sub	r27, r27
 a94:	51 e1       	ldi	r21, 0x11	; 17
 a96:	07 c0       	rjmp	.+14     	; 0xaa6 <__udivmodhi4_ep>

00000a98 <__udivmodhi4_loop>:
 a98:	aa 1f       	adc	r26, r26
 a9a:	bb 1f       	adc	r27, r27
 a9c:	a6 17       	cp	r26, r22
 a9e:	b7 07       	cpc	r27, r23
 aa0:	10 f0       	brcs	.+4      	; 0xaa6 <__udivmodhi4_ep>
 aa2:	a6 1b       	sub	r26, r22
 aa4:	b7 0b       	sbc	r27, r23

00000aa6 <__udivmodhi4_ep>:
 aa6:	88 1f       	adc	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	5a 95       	dec	r21
 aac:	a9 f7       	brne	.-22     	; 0xa98 <__udivmodhi4_loop>
 aae:	80 95       	com	r24
 ab0:	90 95       	com	r25
 ab2:	bc 01       	movw	r22, r24
 ab4:	cd 01       	movw	r24, r26
 ab6:	08 95       	ret

00000ab8 <__divmodhi4>:
 ab8:	97 fb       	bst	r25, 7
 aba:	07 2e       	mov	r0, r23
 abc:	16 f4       	brtc	.+4      	; 0xac2 <__divmodhi4+0xa>
 abe:	00 94       	com	r0
 ac0:	07 d0       	rcall	.+14     	; 0xad0 <__divmodhi4_neg1>
 ac2:	77 fd       	sbrc	r23, 7
 ac4:	09 d0       	rcall	.+18     	; 0xad8 <__divmodhi4_neg2>
 ac6:	0e 94 48 05 	call	0xa90	; 0xa90 <__udivmodhi4>
 aca:	07 fc       	sbrc	r0, 7
 acc:	05 d0       	rcall	.+10     	; 0xad8 <__divmodhi4_neg2>
 ace:	3e f4       	brtc	.+14     	; 0xade <__divmodhi4_exit>

00000ad0 <__divmodhi4_neg1>:
 ad0:	90 95       	com	r25
 ad2:	81 95       	neg	r24
 ad4:	9f 4f       	sbci	r25, 0xFF	; 255
 ad6:	08 95       	ret

00000ad8 <__divmodhi4_neg2>:
 ad8:	70 95       	com	r23
 ada:	61 95       	neg	r22
 adc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ade <__divmodhi4_exit>:
 ade:	08 95       	ret

00000ae0 <__udivmodsi4>:
 ae0:	a1 e2       	ldi	r26, 0x21	; 33
 ae2:	1a 2e       	mov	r1, r26
 ae4:	aa 1b       	sub	r26, r26
 ae6:	bb 1b       	sub	r27, r27
 ae8:	fd 01       	movw	r30, r26
 aea:	0d c0       	rjmp	.+26     	; 0xb06 <__udivmodsi4_ep>

00000aec <__udivmodsi4_loop>:
 aec:	aa 1f       	adc	r26, r26
 aee:	bb 1f       	adc	r27, r27
 af0:	ee 1f       	adc	r30, r30
 af2:	ff 1f       	adc	r31, r31
 af4:	a2 17       	cp	r26, r18
 af6:	b3 07       	cpc	r27, r19
 af8:	e4 07       	cpc	r30, r20
 afa:	f5 07       	cpc	r31, r21
 afc:	20 f0       	brcs	.+8      	; 0xb06 <__udivmodsi4_ep>
 afe:	a2 1b       	sub	r26, r18
 b00:	b3 0b       	sbc	r27, r19
 b02:	e4 0b       	sbc	r30, r20
 b04:	f5 0b       	sbc	r31, r21

00000b06 <__udivmodsi4_ep>:
 b06:	66 1f       	adc	r22, r22
 b08:	77 1f       	adc	r23, r23
 b0a:	88 1f       	adc	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	1a 94       	dec	r1
 b10:	69 f7       	brne	.-38     	; 0xaec <__udivmodsi4_loop>
 b12:	60 95       	com	r22
 b14:	70 95       	com	r23
 b16:	80 95       	com	r24
 b18:	90 95       	com	r25
 b1a:	9b 01       	movw	r18, r22
 b1c:	ac 01       	movw	r20, r24
 b1e:	bd 01       	movw	r22, r26
 b20:	cf 01       	movw	r24, r30
 b22:	08 95       	ret

00000b24 <__tablejump2__>:
 b24:	ee 0f       	add	r30, r30
 b26:	ff 1f       	adc	r31, r31

00000b28 <__tablejump__>:
 b28:	05 90       	lpm	r0, Z+
 b2a:	f4 91       	lpm	r31, Z
 b2c:	e0 2d       	mov	r30, r0
 b2e:	09 94       	ijmp

00000b30 <__umulhisi3>:
 b30:	a2 9f       	mul	r26, r18
 b32:	b0 01       	movw	r22, r0
 b34:	b3 9f       	mul	r27, r19
 b36:	c0 01       	movw	r24, r0
 b38:	a3 9f       	mul	r26, r19
 b3a:	70 0d       	add	r23, r0
 b3c:	81 1d       	adc	r24, r1
 b3e:	11 24       	eor	r1, r1
 b40:	91 1d       	adc	r25, r1
 b42:	b2 9f       	mul	r27, r18
 b44:	70 0d       	add	r23, r0
 b46:	81 1d       	adc	r24, r1
 b48:	11 24       	eor	r1, r1
 b4a:	91 1d       	adc	r25, r1
 b4c:	08 95       	ret

00000b4e <__mulshisi3>:
 b4e:	b7 ff       	sbrs	r27, 7
 b50:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__muluhisi3>

00000b54 <__mulohisi3>:
 b54:	0e 94 af 05 	call	0xb5e	; 0xb5e <__muluhisi3>
 b58:	82 1b       	sub	r24, r18
 b5a:	93 0b       	sbc	r25, r19
 b5c:	08 95       	ret

00000b5e <__muluhisi3>:
 b5e:	0e 94 98 05 	call	0xb30	; 0xb30 <__umulhisi3>
 b62:	a5 9f       	mul	r26, r21
 b64:	90 0d       	add	r25, r0
 b66:	b4 9f       	mul	r27, r20
 b68:	90 0d       	add	r25, r0
 b6a:	a4 9f       	mul	r26, r20
 b6c:	80 0d       	add	r24, r0
 b6e:	91 1d       	adc	r25, r1
 b70:	11 24       	eor	r1, r1
 b72:	08 95       	ret

00000b74 <malloc>:
 b74:	cf 93       	push	r28
 b76:	df 93       	push	r29
 b78:	82 30       	cpi	r24, 0x02	; 2
 b7a:	91 05       	cpc	r25, r1
 b7c:	10 f4       	brcc	.+4      	; 0xb82 <malloc+0xe>
 b7e:	82 e0       	ldi	r24, 0x02	; 2
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	e0 91 15 01 	lds	r30, 0x0115
 b86:	f0 91 16 01 	lds	r31, 0x0116
 b8a:	20 e0       	ldi	r18, 0x00	; 0
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	a0 e0       	ldi	r26, 0x00	; 0
 b90:	b0 e0       	ldi	r27, 0x00	; 0
 b92:	30 97       	sbiw	r30, 0x00	; 0
 b94:	39 f1       	breq	.+78     	; 0xbe4 <malloc+0x70>
 b96:	40 81       	ld	r20, Z
 b98:	51 81       	ldd	r21, Z+1	; 0x01
 b9a:	48 17       	cp	r20, r24
 b9c:	59 07       	cpc	r21, r25
 b9e:	b8 f0       	brcs	.+46     	; 0xbce <malloc+0x5a>
 ba0:	48 17       	cp	r20, r24
 ba2:	59 07       	cpc	r21, r25
 ba4:	71 f4       	brne	.+28     	; 0xbc2 <malloc+0x4e>
 ba6:	82 81       	ldd	r24, Z+2	; 0x02
 ba8:	93 81       	ldd	r25, Z+3	; 0x03
 baa:	10 97       	sbiw	r26, 0x00	; 0
 bac:	29 f0       	breq	.+10     	; 0xbb8 <malloc+0x44>
 bae:	13 96       	adiw	r26, 0x03	; 3
 bb0:	9c 93       	st	X, r25
 bb2:	8e 93       	st	-X, r24
 bb4:	12 97       	sbiw	r26, 0x02	; 2
 bb6:	2c c0       	rjmp	.+88     	; 0xc10 <malloc+0x9c>
 bb8:	90 93 16 01 	sts	0x0116, r25
 bbc:	80 93 15 01 	sts	0x0115, r24
 bc0:	27 c0       	rjmp	.+78     	; 0xc10 <malloc+0x9c>
 bc2:	21 15       	cp	r18, r1
 bc4:	31 05       	cpc	r19, r1
 bc6:	31 f0       	breq	.+12     	; 0xbd4 <malloc+0x60>
 bc8:	42 17       	cp	r20, r18
 bca:	53 07       	cpc	r21, r19
 bcc:	18 f0       	brcs	.+6      	; 0xbd4 <malloc+0x60>
 bce:	a9 01       	movw	r20, r18
 bd0:	db 01       	movw	r26, r22
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <malloc+0x62>
 bd4:	ef 01       	movw	r28, r30
 bd6:	9a 01       	movw	r18, r20
 bd8:	bd 01       	movw	r22, r26
 bda:	df 01       	movw	r26, r30
 bdc:	02 80       	ldd	r0, Z+2	; 0x02
 bde:	f3 81       	ldd	r31, Z+3	; 0x03
 be0:	e0 2d       	mov	r30, r0
 be2:	d7 cf       	rjmp	.-82     	; 0xb92 <malloc+0x1e>
 be4:	21 15       	cp	r18, r1
 be6:	31 05       	cpc	r19, r1
 be8:	f9 f0       	breq	.+62     	; 0xc28 <malloc+0xb4>
 bea:	28 1b       	sub	r18, r24
 bec:	39 0b       	sbc	r19, r25
 bee:	24 30       	cpi	r18, 0x04	; 4
 bf0:	31 05       	cpc	r19, r1
 bf2:	80 f4       	brcc	.+32     	; 0xc14 <malloc+0xa0>
 bf4:	8a 81       	ldd	r24, Y+2	; 0x02
 bf6:	9b 81       	ldd	r25, Y+3	; 0x03
 bf8:	61 15       	cp	r22, r1
 bfa:	71 05       	cpc	r23, r1
 bfc:	21 f0       	breq	.+8      	; 0xc06 <malloc+0x92>
 bfe:	fb 01       	movw	r30, r22
 c00:	93 83       	std	Z+3, r25	; 0x03
 c02:	82 83       	std	Z+2, r24	; 0x02
 c04:	04 c0       	rjmp	.+8      	; 0xc0e <malloc+0x9a>
 c06:	90 93 16 01 	sts	0x0116, r25
 c0a:	80 93 15 01 	sts	0x0115, r24
 c0e:	fe 01       	movw	r30, r28
 c10:	32 96       	adiw	r30, 0x02	; 2
 c12:	44 c0       	rjmp	.+136    	; 0xc9c <malloc+0x128>
 c14:	fe 01       	movw	r30, r28
 c16:	e2 0f       	add	r30, r18
 c18:	f3 1f       	adc	r31, r19
 c1a:	81 93       	st	Z+, r24
 c1c:	91 93       	st	Z+, r25
 c1e:	22 50       	subi	r18, 0x02	; 2
 c20:	31 09       	sbc	r19, r1
 c22:	39 83       	std	Y+1, r19	; 0x01
 c24:	28 83       	st	Y, r18
 c26:	3a c0       	rjmp	.+116    	; 0xc9c <malloc+0x128>
 c28:	20 91 13 01 	lds	r18, 0x0113
 c2c:	30 91 14 01 	lds	r19, 0x0114
 c30:	23 2b       	or	r18, r19
 c32:	41 f4       	brne	.+16     	; 0xc44 <malloc+0xd0>
 c34:	20 91 02 01 	lds	r18, 0x0102
 c38:	30 91 03 01 	lds	r19, 0x0103
 c3c:	30 93 14 01 	sts	0x0114, r19
 c40:	20 93 13 01 	sts	0x0113, r18
 c44:	20 91 00 01 	lds	r18, 0x0100
 c48:	30 91 01 01 	lds	r19, 0x0101
 c4c:	21 15       	cp	r18, r1
 c4e:	31 05       	cpc	r19, r1
 c50:	41 f4       	brne	.+16     	; 0xc62 <malloc+0xee>
 c52:	2d b7       	in	r18, 0x3d	; 61
 c54:	3e b7       	in	r19, 0x3e	; 62
 c56:	40 91 04 01 	lds	r20, 0x0104
 c5a:	50 91 05 01 	lds	r21, 0x0105
 c5e:	24 1b       	sub	r18, r20
 c60:	35 0b       	sbc	r19, r21
 c62:	e0 91 13 01 	lds	r30, 0x0113
 c66:	f0 91 14 01 	lds	r31, 0x0114
 c6a:	e2 17       	cp	r30, r18
 c6c:	f3 07       	cpc	r31, r19
 c6e:	a0 f4       	brcc	.+40     	; 0xc98 <malloc+0x124>
 c70:	2e 1b       	sub	r18, r30
 c72:	3f 0b       	sbc	r19, r31
 c74:	28 17       	cp	r18, r24
 c76:	39 07       	cpc	r19, r25
 c78:	78 f0       	brcs	.+30     	; 0xc98 <malloc+0x124>
 c7a:	ac 01       	movw	r20, r24
 c7c:	4e 5f       	subi	r20, 0xFE	; 254
 c7e:	5f 4f       	sbci	r21, 0xFF	; 255
 c80:	24 17       	cp	r18, r20
 c82:	35 07       	cpc	r19, r21
 c84:	48 f0       	brcs	.+18     	; 0xc98 <malloc+0x124>
 c86:	4e 0f       	add	r20, r30
 c88:	5f 1f       	adc	r21, r31
 c8a:	50 93 14 01 	sts	0x0114, r21
 c8e:	40 93 13 01 	sts	0x0113, r20
 c92:	81 93       	st	Z+, r24
 c94:	91 93       	st	Z+, r25
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <malloc+0x128>
 c98:	e0 e0       	ldi	r30, 0x00	; 0
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	cf 01       	movw	r24, r30
 c9e:	df 91       	pop	r29
 ca0:	cf 91       	pop	r28
 ca2:	08 95       	ret

00000ca4 <free>:
 ca4:	cf 93       	push	r28
 ca6:	df 93       	push	r29
 ca8:	00 97       	sbiw	r24, 0x00	; 0
 caa:	09 f4       	brne	.+2      	; 0xcae <free+0xa>
 cac:	87 c0       	rjmp	.+270    	; 0xdbc <free+0x118>
 cae:	fc 01       	movw	r30, r24
 cb0:	32 97       	sbiw	r30, 0x02	; 2
 cb2:	13 82       	std	Z+3, r1	; 0x03
 cb4:	12 82       	std	Z+2, r1	; 0x02
 cb6:	c0 91 15 01 	lds	r28, 0x0115
 cba:	d0 91 16 01 	lds	r29, 0x0116
 cbe:	20 97       	sbiw	r28, 0x00	; 0
 cc0:	81 f4       	brne	.+32     	; 0xce2 <free+0x3e>
 cc2:	20 81       	ld	r18, Z
 cc4:	31 81       	ldd	r19, Z+1	; 0x01
 cc6:	28 0f       	add	r18, r24
 cc8:	39 1f       	adc	r19, r25
 cca:	80 91 13 01 	lds	r24, 0x0113
 cce:	90 91 14 01 	lds	r25, 0x0114
 cd2:	82 17       	cp	r24, r18
 cd4:	93 07       	cpc	r25, r19
 cd6:	79 f5       	brne	.+94     	; 0xd36 <free+0x92>
 cd8:	f0 93 14 01 	sts	0x0114, r31
 cdc:	e0 93 13 01 	sts	0x0113, r30
 ce0:	6d c0       	rjmp	.+218    	; 0xdbc <free+0x118>
 ce2:	de 01       	movw	r26, r28
 ce4:	20 e0       	ldi	r18, 0x00	; 0
 ce6:	30 e0       	ldi	r19, 0x00	; 0
 ce8:	ae 17       	cp	r26, r30
 cea:	bf 07       	cpc	r27, r31
 cec:	50 f4       	brcc	.+20     	; 0xd02 <free+0x5e>
 cee:	12 96       	adiw	r26, 0x02	; 2
 cf0:	4d 91       	ld	r20, X+
 cf2:	5c 91       	ld	r21, X
 cf4:	13 97       	sbiw	r26, 0x03	; 3
 cf6:	9d 01       	movw	r18, r26
 cf8:	41 15       	cp	r20, r1
 cfa:	51 05       	cpc	r21, r1
 cfc:	09 f1       	breq	.+66     	; 0xd40 <free+0x9c>
 cfe:	da 01       	movw	r26, r20
 d00:	f3 cf       	rjmp	.-26     	; 0xce8 <free+0x44>
 d02:	b3 83       	std	Z+3, r27	; 0x03
 d04:	a2 83       	std	Z+2, r26	; 0x02
 d06:	40 81       	ld	r20, Z
 d08:	51 81       	ldd	r21, Z+1	; 0x01
 d0a:	84 0f       	add	r24, r20
 d0c:	95 1f       	adc	r25, r21
 d0e:	8a 17       	cp	r24, r26
 d10:	9b 07       	cpc	r25, r27
 d12:	71 f4       	brne	.+28     	; 0xd30 <free+0x8c>
 d14:	8d 91       	ld	r24, X+
 d16:	9c 91       	ld	r25, X
 d18:	11 97       	sbiw	r26, 0x01	; 1
 d1a:	84 0f       	add	r24, r20
 d1c:	95 1f       	adc	r25, r21
 d1e:	02 96       	adiw	r24, 0x02	; 2
 d20:	91 83       	std	Z+1, r25	; 0x01
 d22:	80 83       	st	Z, r24
 d24:	12 96       	adiw	r26, 0x02	; 2
 d26:	8d 91       	ld	r24, X+
 d28:	9c 91       	ld	r25, X
 d2a:	13 97       	sbiw	r26, 0x03	; 3
 d2c:	93 83       	std	Z+3, r25	; 0x03
 d2e:	82 83       	std	Z+2, r24	; 0x02
 d30:	21 15       	cp	r18, r1
 d32:	31 05       	cpc	r19, r1
 d34:	29 f4       	brne	.+10     	; 0xd40 <free+0x9c>
 d36:	f0 93 16 01 	sts	0x0116, r31
 d3a:	e0 93 15 01 	sts	0x0115, r30
 d3e:	3e c0       	rjmp	.+124    	; 0xdbc <free+0x118>
 d40:	d9 01       	movw	r26, r18
 d42:	13 96       	adiw	r26, 0x03	; 3
 d44:	fc 93       	st	X, r31
 d46:	ee 93       	st	-X, r30
 d48:	12 97       	sbiw	r26, 0x02	; 2
 d4a:	4d 91       	ld	r20, X+
 d4c:	5d 91       	ld	r21, X+
 d4e:	a4 0f       	add	r26, r20
 d50:	b5 1f       	adc	r27, r21
 d52:	ea 17       	cp	r30, r26
 d54:	fb 07       	cpc	r31, r27
 d56:	79 f4       	brne	.+30     	; 0xd76 <free+0xd2>
 d58:	80 81       	ld	r24, Z
 d5a:	91 81       	ldd	r25, Z+1	; 0x01
 d5c:	84 0f       	add	r24, r20
 d5e:	95 1f       	adc	r25, r21
 d60:	02 96       	adiw	r24, 0x02	; 2
 d62:	d9 01       	movw	r26, r18
 d64:	11 96       	adiw	r26, 0x01	; 1
 d66:	9c 93       	st	X, r25
 d68:	8e 93       	st	-X, r24
 d6a:	82 81       	ldd	r24, Z+2	; 0x02
 d6c:	93 81       	ldd	r25, Z+3	; 0x03
 d6e:	13 96       	adiw	r26, 0x03	; 3
 d70:	9c 93       	st	X, r25
 d72:	8e 93       	st	-X, r24
 d74:	12 97       	sbiw	r26, 0x02	; 2
 d76:	e0 e0       	ldi	r30, 0x00	; 0
 d78:	f0 e0       	ldi	r31, 0x00	; 0
 d7a:	8a 81       	ldd	r24, Y+2	; 0x02
 d7c:	9b 81       	ldd	r25, Y+3	; 0x03
 d7e:	00 97       	sbiw	r24, 0x00	; 0
 d80:	19 f0       	breq	.+6      	; 0xd88 <free+0xe4>
 d82:	fe 01       	movw	r30, r28
 d84:	ec 01       	movw	r28, r24
 d86:	f9 cf       	rjmp	.-14     	; 0xd7a <free+0xd6>
 d88:	ce 01       	movw	r24, r28
 d8a:	02 96       	adiw	r24, 0x02	; 2
 d8c:	28 81       	ld	r18, Y
 d8e:	39 81       	ldd	r19, Y+1	; 0x01
 d90:	82 0f       	add	r24, r18
 d92:	93 1f       	adc	r25, r19
 d94:	20 91 13 01 	lds	r18, 0x0113
 d98:	30 91 14 01 	lds	r19, 0x0114
 d9c:	28 17       	cp	r18, r24
 d9e:	39 07       	cpc	r19, r25
 da0:	69 f4       	brne	.+26     	; 0xdbc <free+0x118>
 da2:	30 97       	sbiw	r30, 0x00	; 0
 da4:	29 f4       	brne	.+10     	; 0xdb0 <free+0x10c>
 da6:	10 92 16 01 	sts	0x0116, r1
 daa:	10 92 15 01 	sts	0x0115, r1
 dae:	02 c0       	rjmp	.+4      	; 0xdb4 <free+0x110>
 db0:	13 82       	std	Z+3, r1	; 0x03
 db2:	12 82       	std	Z+2, r1	; 0x02
 db4:	d0 93 14 01 	sts	0x0114, r29
 db8:	c0 93 13 01 	sts	0x0113, r28
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	08 95       	ret

00000dc2 <memset>:
 dc2:	dc 01       	movw	r26, r24
 dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <memset+0x6>
 dc6:	6d 93       	st	X+, r22
 dc8:	41 50       	subi	r20, 0x01	; 1
 dca:	50 40       	sbci	r21, 0x00	; 0
 dcc:	e0 f7       	brcc	.-8      	; 0xdc6 <memset+0x4>
 dce:	08 95       	ret

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
